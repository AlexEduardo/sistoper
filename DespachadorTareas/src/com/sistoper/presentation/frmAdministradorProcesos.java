/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmAdministradorProcesos.java
 *
 * Created on 17-jun-2012, 19:21:08
 */
package com.sistoper.presentation;

import com.sistoper.business.Despachador;
import com.sistoper.domain.Proceso;
import com.sistoper.domain.Programa;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mathias
 */
public class frmAdministradorProcesos extends javax.swing.JInternalFrame implements Observer {

    private DefaultTableModel tmAplicaciones;
    private DefaultTableModel tmProcesos;
    private DefaultTableModel tmMonitoreo;

    /**
     * Creates new form frmAdministradorProcesos
     */
    public frmAdministradorProcesos() {
        initComponents();
        //Inicializo los modelos    
        tmAplicaciones = new DefaultTableModel();
        tmProcesos = new DefaultTableModel();
        tmMonitoreo = new DefaultTableModel();
        //Asigno los modelos a las tablas
        tblAplicaciones.setModel(tmAplicaciones);
        tblProcesos.setModel(tmProcesos);
        tblMonitoreo.setModel(tmMonitoreo);
        //Creo las columnas de los modelos
        //Aplicaciones
        tmAplicaciones.addColumn("Nombre");
        tmAplicaciones.addColumn("#Procesos");
        //Procesos
        tmProcesos.addColumn("Id");
        tmProcesos.addColumn("Nombre");
        tmProcesos.addColumn("Estado");
        tmProcesos.addColumn("Prioridad");
        //Monitoreo
        tmMonitoreo.addColumn("Id");
        tmMonitoreo.addColumn("Nombre");
        tmMonitoreo.addColumn("% Ejecutado");
    }

    public void agregarAplicacion(Programa p) {
        String[] aAgregar = new String[2];
        aAgregar[0] = p.getNombre();
        aAgregar[1] = String.valueOf(p.getProcesos().size());
        tmAplicaciones.addRow(aAgregar);
    }

    public synchronized void agregarProceso(Proceso p) {
        String[] aAgregar = new String[4];
        aAgregar[0] = String.valueOf(p.getId());
        aAgregar[1] = p.getNombre();
        aAgregar[2] = p.getEstado().toString();
        aAgregar[3] = String.valueOf(p.getPrioridad());
        tmProcesos.addRow(aAgregar);
    }

    public void agregarMonitoreo(String id, String nom, String ejec) {
        String[] aAgregar = new String[3];
        aAgregar[0] = id;
        aAgregar[1] = nom;
        aAgregar[2] = ejec;
        tmProcesos.addRow(aAgregar);
    }

    public void editarProceso(Proceso p) {
        int nroFilas = tmProcesos.getRowCount() - 1;
        for (int i = 0; i <= nroFilas; i++) {
            int auxValor = Integer.parseInt(tmProcesos.getValueAt(i, 0).toString());
            if (auxValor == p.getId()) {
                tmProcesos.setValueAt(p.getEstado().toString(), i, 2);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpPrincipal = new javax.swing.JTabbedPane();
        pAplicaciones = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAplicaciones = new javax.swing.JTable();
        pProcesos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProcesos = new javax.swing.JTable();
        Historial = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMonitoreo = new javax.swing.JTable();

        setName("Form"); // NOI18N

        tpPrincipal.setName("tpPrincipal"); // NOI18N

        pAplicaciones.setName("pAplicaciones"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tblAplicaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        tblAplicaciones.setName("tblAplicaciones"); // NOI18N
        tblAplicaciones.setShowHorizontalLines(false);
        tblAplicaciones.setShowVerticalLines(false);
        jScrollPane1.setViewportView(tblAplicaciones);

        org.jdesktop.layout.GroupLayout pAplicacionesLayout = new org.jdesktop.layout.GroupLayout(pAplicaciones);
        pAplicaciones.setLayout(pAplicacionesLayout);
        pAplicacionesLayout.setHorizontalGroup(
            pAplicacionesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pAplicacionesLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                .addContainerGap())
        );
        pAplicacionesLayout.setVerticalGroup(
            pAplicacionesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pAplicacionesLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(despachadortareas.DespachadorTareasApp.class).getContext().getResourceMap(frmAdministradorProcesos.class);
        tpPrincipal.addTab(resourceMap.getString("pAplicaciones.TabConstraints.tabTitle"), pAplicaciones); // NOI18N

        pProcesos.setName("pProcesos"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tblProcesos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblProcesos.setName("tblProcesos"); // NOI18N
        tblProcesos.setShowHorizontalLines(false);
        tblProcesos.setShowVerticalLines(false);
        jScrollPane2.setViewportView(tblProcesos);

        org.jdesktop.layout.GroupLayout pProcesosLayout = new org.jdesktop.layout.GroupLayout(pProcesos);
        pProcesos.setLayout(pProcesosLayout);
        pProcesosLayout.setHorizontalGroup(
            pProcesosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pProcesosLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                .addContainerGap())
        );
        pProcesosLayout.setVerticalGroup(
            pProcesosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pProcesosLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addContainerGap())
        );

        tpPrincipal.addTab("Procesos", pProcesos);

        Historial.setName("Historial"); // NOI18N

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Historial de uso de CPU"));
        jPanel4.setName("jPanel4"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        tblMonitoreo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Proceso", "Tiempo Restante"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMonitoreo.setName("tblMonitoreo"); // NOI18N
        jScrollPane3.setViewportView(tblMonitoreo);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout HistorialLayout = new org.jdesktop.layout.GroupLayout(Historial);
        Historial.setLayout(HistorialLayout);
        HistorialLayout.setHorizontalGroup(
            HistorialLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(HistorialLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        HistorialLayout.setVerticalGroup(
            HistorialLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(HistorialLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tpPrincipal.addTab("Rendimiento", Historial);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tpPrincipal, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tpPrincipal, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Historial;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel pAplicaciones;
    private javax.swing.JPanel pProcesos;
    private javax.swing.JTable tblAplicaciones;
    private javax.swing.JTable tblMonitoreo;
    private javax.swing.JTable tblProcesos;
    private javax.swing.JTabbedPane tpPrincipal;
    // End of variables declaration//GEN-END:variables

    public void update(Observable o, Object o1) {
        List<Proceso> colaProcesos = ((Despachador) o).getColaProcesos();
        List<Proceso> colaProcesosBloqueados = ((Despachador) o).getColaProcesosBloqueados();
        int numeroProcesos = tmProcesos.getRowCount();
        for (int i = 0; i < numeroProcesos; i++) {
            tmProcesos.removeRow(0);
        }        
        Proceso procesoEjecucion = ((Despachador) o).obtenerProcesoEjecucion();
        if (procesoEjecucion != null) {
            this.agregarProceso(procesoEjecucion);
        }
        for (Proceso proceso : colaProcesos) {
            this.agregarProceso(proceso);
        }
        for (Proceso proceso : colaProcesosBloqueados) {
            this.agregarProceso(proceso);
        }
        this.updateUI();
    }
}
